package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /api
public class MainController {
    @Autowired // This means to get the bean called transactionRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TransactionRepository transactionRepository;

    @PostMapping(path="/addTransaction") // Map ONLY POST Requests
    public @ResponseBody String addNewTransaction(@RequestParam String sender
            , @RequestParam String recipient, @RequestParam Double transaction_value) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the request

        Transaction t = new Transaction();
        t.setSender(sender);
        t.setRecipient(recipient);
        t.setTransaction_value(transaction_value);
        t.setSoft_delete(false);
        transactionRepository.save(t);
        return "Transaction Successfully Saved";
    }

    @GetMapping(path="/transaction")
    public @ResponseBody Optional<Transaction> getById(@RequestParam Integer id) {
        // This returns a JSON or XML with the users
        return transactionRepository.findById(id);

    }

    @GetMapping(path="/allAvailableTransactions")
    public @ResponseBody Iterable<Transaction> getAllUsers() {
        // This returns a JSON or XML with the users
        Iterable<Transaction> allTransactions = transactionRepository.findAll();
        ArrayList<Transaction> availableTransactions = new ArrayList<>();

        for (Transaction t: allTransactions)
        {
            if(t.getSoft_delete() == false)
            {
                availableTransactions.add(t);
            }
        }
        return availableTransactions;
    }

    @GetMapping(path="/sumTransactions")
    public @ResponseBody Double getSumTransactions() {
        // This returns a JSON or XML with the users
        Iterable<Transaction> allTransactions = transactionRepository.findAll();
        Double sum = 0.0;

        for (Transaction t: allTransactions)
        {
            if(t.getSoft_delete() == false)
            {
                sum += t.getTransaction_value();
            }
        }
        return sum;
    }

    @PutMapping(path="/updateTransaction")
    public @ResponseBody Optional<Transaction> updateTransactionValue(@RequestParam Integer id,
                                                                      @RequestParam Double transaction_value) {
        // This returns a JSON or XML with the users
        Optional<Transaction> t = transactionRepository.findById(id);
        if(t.get() != null)
        {
            t.get().setTransaction_value(transaction_value);
            transactionRepository.save(t.get());
        }
        return t;
    }

    @DeleteMapping(path="/deleteTransaction")
    public @ResponseBody String softDeleteTransaction(@RequestParam Integer id) {
        // This returns a JSON or XML with the users
        Optional<Transaction> t = transactionRepository.findById(id);
        if(t.get() != null)
        {
            t.get().setSoft_delete(true);
            transactionRepository.save(t.get());
            return "Deleted Transaction with id " + id.toString();
        }
        return "Transaction Not Found";
    }
}